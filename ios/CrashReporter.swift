import Foundation
import UIKit

// Define a global C function for exception handling
private func myUncaughtExceptionHandler(exception: NSException) {
    CrashReporter.handleException(exception)
}

class CrashReporter {
    private static var isSetup = false

    static func setup() {
        guard !isSetup else {
            LoggingService.info("Crash reporter already set up")
            return
        }
        
        isSetup = true
        LoggingService.info("Setting up native crash reporter")
        
        // Use the global exception handler function.
        NSSetUncaughtExceptionHandler(myUncaughtExceptionHandler)
        
        // Check for previous crash reports on app startup.
        checkForPreviousCrashes()
    }
    
    // This method is called by the global exception handler.
    static func handleException(_ exception: NSException) {
        LoggingService.error("App is crashing due to uncaught exception: \(exception.name.rawValue)")
        
        // Create a detailed crash log.
        var crashLog = "Exception: \(exception.name.rawValue)\n"
        crashLog += "Reason: \(exception.reason ?? "No reason")\n"
        crashLog += "Stack Trace:\n\(exception.callStackSymbols.joined(separator: "\n"))"
        
        // Save crash info to be reported on next app launch.
        saveCrashReport(crashType: "Exception: \(exception.name.rawValue)", details: crashLog)
    }
    
    private static func getCrashReportPath() -> URL {
        let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        return documentsDirectory.appendingPathComponent("toadly_crash_report.json")
    }
    
    static func saveCrashReport(crashType: String, details: String? = nil) {
        let crashInfo: [String: Any] = [
            "timestamp": Date().timeIntervalSince1970,
            "crashType": crashType,
            "details": details ?? "",
            "appVersion": Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "Unknown",
            "buildNumber": Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "Unknown",
            "deviceModel": UIDevice.current.model,
            "systemVersion": UIDevice.current.systemVersion
        ]
        
        if let crashData = try? JSONSerialization.data(withJSONObject: crashInfo) {
            let crashReportPath = getCrashReportPath()
            try? crashData.write(to: crashReportPath)
            LoggingService.info("Saved crash report to: \(crashReportPath.path)")
        }
    }
    
    private static func checkForPreviousCrashes() {
        let crashReportPath = getCrashReportPath()
        
        guard FileManager.default.fileExists(atPath: crashReportPath.path),
              let crashData = try? Data(contentsOf: crashReportPath),
              let crashInfo = try? JSONSerialization.jsonObject(with: crashData) as? [String: Any] else {
            return
        }
        
        LoggingService.info("Found previous crash report, submitting to GitHub")
        
        let crashType = crashInfo["crashType"] as? String ?? "Unknown Crash"
        let crashDetails = crashInfo["details"] as? String ?? ""
        let timestamp = crashInfo["timestamp"] as? TimeInterval ?? 0
        let date = Date(timeIntervalSince1970: timestamp)
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .medium
        dateFormatter.timeStyle = .medium
        let dateString = dateFormatter.string(from: date)
        
        let appVersion = crashInfo["appVersion"] as? String ?? "Unknown"
        let buildNumber = crashInfo["buildNumber"] as? String ?? "Unknown"
        let deviceModel = crashInfo["deviceModel"] as? String ?? "Unknown"
        let systemVersion = crashInfo["systemVersion"] as? String ?? "Unknown"
        
        let title = "Native Crash: \(crashType)"
        let details = """
        ## Native iOS Crash Report
        
        ### Crash Information
        - **Type**: \(crashType)
        - **Time**: \(dateString)
        
        ### App Information
        - **Version**: \(appVersion) (\(buildNumber))
        - **Device**: \(deviceModel)
        - **iOS Version**: \(systemVersion)
        
        ### Crash Details
        ```
        \(crashDetails)
        ```
        
        This crash report was automatically generated by Toadly.
        """
        
        // Submit the crash report to GitHub.
        submitCrashReport(title: title, details: details)
        
        // Delete the crash report file after submission.
        try? FileManager.default.removeItem(at: crashReportPath)
    }
    
    private static func submitCrashReport(title: String, details: String) {
        GitHubService.submitIssue(
            email: "auto-generated@toadly.app",
            title: title,
            details: details,
            jsLogs: "",
            screenshotData: nil
        ) { result in
            switch result {
            case .success(let issueUrl):
                LoggingService.info("Native Crash Report Submitted to GitHub: \(issueUrl)")
                print("Native Crash Report Submitted to GitHub: \(issueUrl)")
            case .failure(let error):
                LoggingService.error("Failed to submit native crash report to GitHub: \(error.localizedDescription)")
                print("Failed to submit native crash report to GitHub: \(error.localizedDescription)")
            }
        }
    }
    
    // Helper method to handle intentionally triggered crashes for testing.
    static func handleIntentionalCrash() {
        LoggingService.info("Handling intentional crash triggered by CrashUtil")
        saveCrashReport(crashType: "Intentional Test Crash", details: "This crash was intentionally triggered for testing purposes.")
    }
}